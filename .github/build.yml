name: Build Release

on:
  workflow_run:
    workflows: ["Prepare Release"]
    types:
      - completed

jobs:
  build:
    name: Build (${{ matrix.target }})
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: thira
            asset_name: thira-linux-x86_64
            archive_ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: thira
            asset_name: thira-darwin-x86_64
            archive_ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: thira
            asset_name: thira-darwin-arm64
            archive_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: thira.exe
            asset_name: thira-windows-x86_64
            archive_ext: zip

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download updated Cargo.toml
        uses: actions/download-artifact@v4
        with:
          name: cargo-toml
          path: .

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev libsecret-1-dev pkg-config

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Setup cross-compilation for Apple Silicon
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          rustup target add aarch64-apple-darwin
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.0"
          SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/${{ matrix.asset_name }}
          cd dist && tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item "target\${{ matrix.target }}\release\${{ matrix.binary_name }}" -Destination "dist\${{ matrix.asset_name }}.exe"
          Compress-Archive -Path "dist\${{ matrix.asset_name }}.exe" -DestinationPath "dist\${{ matrix.asset_name }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}.${{ matrix.archive_ext }}
          path: dist/${{ matrix.asset_name }}.${{ matrix.archive_ext }}
          retention-days: 1
