name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semantic.outputs.new_release_version }}
      release_created: ${{ steps.semantic.outputs.new_release_published }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true # Only determine version without publishing
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git
            @semantic-release/exec
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update Cargo.toml version
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "Updating version to ${{ steps.semantic.outputs.new_release_version }}"
          sed -i.bak -E 's/^version = "[^"]+"$/version = "${{ steps.semantic.outputs.new_release_version }}"/' Cargo.toml
          echo "Updated Cargo.toml:"
          cat Cargo.toml | grep version

      - name: Upload Cargo.toml
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cargo-toml
          path: Cargo.toml
          retention-days: 1
  build-platform-artifact:
    name: Build Platform Artifacts
    needs: prepare
    if: needs.prepare.outputs.release_created == 'true'
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-glibc,
              OS: ubuntu-latest,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-gnu,
              BINARY_NAME: athira,
              ASSET_NAME: athira-linux-x86_64,
              ARCHIVE_EXT: tar.gz,
              MATURIN_TARGET: x86_64,
            }
          - {
              NAME: linux-arm64-glibc,
              OS: ubuntu-latest,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-gnu,
              BINARY_NAME: athira,
              ASSET_NAME: athira-linux-arm64,
              ARCHIVE_EXT: tar.gz,
              MATURIN_TARGET: aarch64,
            }
          - {
              NAME: win32-x64-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: x86_64-pc-windows-msvc,
              BINARY_NAME: athira.exe,
              ASSET_NAME: athira-windows-x86_64,
              ARCHIVE_EXT: zip,
              MATURIN_TARGET: x64,
            }
          - {
              NAME: win32-arm64-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: aarch64-pc-windows-msvc,
              BINARY_NAME: athira.exe,
              ASSET_NAME: athira-windows-arm64,
              ARCHIVE_EXT: zip,
              MATURIN_TARGET: aarch64-pc-windows-msvc,
            }
          - {
              NAME: darwin-x64,
              OS: macos-14,
              TOOLCHAIN: stable,
              TARGET: x86_64-apple-darwin,
              BINARY_NAME: athira,
              ASSET_NAME: athira-darwin-x86_64,
              ARCHIVE_EXT: tar.gz,
              MATURIN_TARGET: x86_64,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-14,
              TOOLCHAIN: stable,
              TARGET: aarch64-apple-darwin,
              BINARY_NAME: athira,
              ASSET_NAME: athira-darwin-arm64,
              ARCHIVE_EXT: tar.gz,
              MATURIN_TARGET: aarch64,
            }

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Install Rust toolchain
      #   shell: bash
      #   run: |
      #     rustup toolchain install stable --target ${{ matrix.build.TARGET }}
      #     rustup default stable
      #     if [[ "${{ matrix.build.OS }}" == "ubuntu-latest" ]]; then
      #       cargo install cross
      #     fi

      - name: Build Python wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.build.MATURIN_TARGET }}
          args: --release --out dist
          sccache: true
          manylinux: auto

      # - name: Build
      #   if: ${{ matrix.build.OS != 'ubuntu-latest' }}
      #   run: cargo build --release --locked --target ${{ matrix.build.TARGET }}

      # - name: Build with Cross
      #   if: ${{ matrix.build.OS == 'ubuntu-latest' }}
      #   run: cross build --release --locked --target ${{ matrix.build.TARGET }}

      - name: Package binary (Unix)
        if: matrix.build.OS != 'windows-2022'
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.build.TARGET }}/release/${{ matrix.build.BINARY_NAME }} dist/${{ matrix.build.ASSET_NAME }}
          cd dist && tar -czf ${{ matrix.build.ASSET_NAME }}.tar.gz ${{ matrix.build.ASSET_NAME }}

      - name: Package binary (Windows)
        if: matrix.build.OS == 'windows-2022'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item "target\${{ matrix.build.TARGET }}\release\${{ matrix.build.BINARY_NAME }}" -Destination "dist\${{ matrix.build.ASSET_NAME }}.exe"
          Compress-Archive -Path "dist\${{ matrix.build.ASSET_NAME }}.exe" -DestinationPath "dist\${{ matrix.build.ASSET_NAME }}.zip"

      - name: Upload Platform Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.ASSET_NAME }}.${{ matrix.build.ARCHIVE_EXT }}
          path: dist/${{ matrix.build.ASSET_NAME }}.${{ matrix.build.ARCHIVE_EXT }}
          retention-days: 1

      - name: Upload Python Wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.build.NAME }}
          path: dist
          retention-days: 1

      - name: Create Build Info
        shell: bash
        run: |
          mkdir -p build-info
          echo '{
            "name": "${{ matrix.build.NAME }}",
            "os": "${{ matrix.build.OS }}",
            "binary_name": "${{ matrix.build.BINARY_NAME }}"
          }' > build-info/build-info.json

      - name: Upload Build Info
        uses: actions/upload-artifact@v4
        with:
          name: build-info-${{ matrix.build.NAME }}
          path: build-info/build-info.json
          retention-days: 1

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  publish-python-packages:
    name: Publish Python Packages
    needs: [prepare, build-platform-artifact, sdist]
    if: needs.prepare.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --repository-url=https://test.pypi.org/legacy/ wheels-*/*

  publish-npm-packages:
    name: Publish NPM Packages
    needs: [prepare, build-platform-artifact]
    if: needs.prepare.outputs.release_created == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      # Download platform artifacts and build info
      - name: Download Platform Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: athira-*
          path: dist
          merge-multiple: true

      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          pattern: build-info-*
          path: build-info

      - name: Publish to NPM
        shell: bash
        run: |
          echo "VERSION: ${{needs.prepare.outputs.new_version}}"
          cd packages/npm


          # Process each build artifact
          for info_file in ../../build-info/build-info-*/build-info.json; do
            # Parse build info
            build_info=$(cat "$info_file")
            build_name=$(echo "$build_info" | jq -r '.name')
            build_os=$(echo "$build_info" | jq -r '.os')
            binary_name=$(echo "$build_info" | jq -r '.binary_name')

            echo "Processing build info:"
            echo "  build_name: $build_name"
            echo "  build_os: $build_os"
            echo "  binary_name: $binary_name"

            # set the binary name
            bin="athira"

            # derive the OS and architecture from the build name
            node_os=$(echo "$build_name" | cut -d '-' -f1)
            export node_os
            node_arch=$(echo "$build_name" | cut -d '-' -f2)
            export node_arch

            # set the version
            export node_version="${{needs.prepare.outputs.new_version}}"

            # set the package name and artifact name
            if [ "$build_os" = "windows-2022" ]; then
              export node_pkg="${bin}-windows-${node_arch}"
              if [ "$node_arch" = "x64" ]; then
                artifact_name="athira-windows-x86_64"
              else
                artifact_name="athira-windows-arm64"
              fi
            else
              export node_pkg="${bin}-${node_os}-${node_arch}"
              if [ "$node_os" = "darwin" ]; then
                if [ "$node_arch" = "x64" ]; then
                  artifact_name="athira-darwin-x86_64"
                else
                  artifact_name="athira-darwin-arm64"
                fi
              else
                if [ "$node_arch" = "x64" ]; then
                  artifact_name="athira-linux-x86_64"
                else
                  artifact_name="athira-linux-arm64"
                fi
              fi
            fi

            echo "Package name: $node_pkg"
            echo "Artifact name: $artifact_name"

            # create the package directory
            mkdir -p "${node_pkg}/bin"

            # generate package.json from the template
            envsubst < package.json.tmpl > "${node_pkg}/package.json"

            # Extract and copy the binary based on OS
            if [ "$build_os" = "windows-2022" ]; then
              # For Windows (.zip)
              echo "Extracting ../../dist/${artifact_name}.zip"
              unzip -j "../../dist/${artifact_name}.zip" -d "${node_pkg}/bin/"
              mv "${node_pkg}/bin/${artifact_name}.exe" "${node_pkg}/bin/${bin}.exe"
            else
              # For Unix (.tar.gz)
              echo "Extracting ../../dist/${artifact_name}.tar.gz"
              tar -xzvf "../../dist/${artifact_name}.tar.gz" -C "${node_pkg}/bin/"
              mv "${node_pkg}/bin/${artifact_name}" "${node_pkg}/bin/${bin}"
            fi

            echo "Contents of ${node_pkg}/bin:"
            ls -la "${node_pkg}/bin"

            # publish the package
            cd "${node_pkg}"
            npm publish --access public --dry-run
            cd ../
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-npm-base:
    name: Publish the base NPM package
    needs: publish-npm-packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Publish the package
        shell: bash
        run: |
          cd packages/npm/athira
          npm install # requires optional dependencies to be present in the registry
          npm publish --access public --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    name: Create Release
    needs:
      [
        prepare,
        build-platform-artifact,
        publish-python-packages,
        publish-npm-packages,
      ]
    if: needs.prepare.outputs.release_created == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create dist directory
        run: mkdir -p dist

      - name: Download Platform Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: athira-*
          path: dist
          merge-multiple: true

      - name: Move artifacts to root
        run: mv dist/* ./

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git
            @semantic-release/exec
            @semantic-release/npm

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
